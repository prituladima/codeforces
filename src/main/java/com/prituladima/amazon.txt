package com.prituladima.codeforce;

import java.io.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.util.Arrays.stream;
import static java.util.stream.IntStream.range;

public final class Main {

    private void solve() {


        List<List<Integer>> ab = new ArrayList<>();
        ab.add(new ArrayList<Integer>() {
            {
                add(1);
                add(0);
                add(0);
            }
        });
        ab.add(new ArrayList<Integer>() {
            {
                add(1);
                add(0);
                add(0);
            }
        });
        ab.add(new ArrayList<Integer>() {
            {
                add(1);
                add(9);
                add(1);
            }
        });
        System.out.println(removeObstacle(3, 3, ab));


    }

    boolean[][] used;
    int numRows;
    int numColumns;
    int result = -1;
    ArrayDeque<PP> queue = new ArrayDeque<>();

    // METHOD SIGNATURE BEGINS, THIS METHOD IS REQUIRED
    int removeObstacle(int numRows, int numColumns, List<List<Integer>> lot) {
        this.numRows = numRows;
        this.numColumns = numColumns;

        used = new boolean[numRows][numColumns];
        queue.addLast(new PP(0, 0));
        bfs(0, 0, 0, lot);
        return result;
    }

    void bfs(int x, int y, int deep, List<List<Integer>> lot) {
        used[x][y] = true;
        if (lot.get(x).get(y) == 9) result = deep;

        while (queue.isEmpty()) {
            if (isInFlat(x - 1, y) && !used[x - 1][y] && lot.get(x - 1).get(y) == 1)
//                bfs(x - 1, y, deep + 1, lot);
//                queue.add()
            if (isInFlat(x + 1, y) && !used[x + 1][y] && lot.get(x + 1).get(y) == 1)
                bfs(x + 1, y, deep + 1, lot);

            if (isInFlat(x, y - 1) && !used[x][y - 1] && lot.get(x).get(y - 1) == 1)
                bfs(x, y - 1, deep + 1, lot);
            if (isInFlat(x, y + 1) && !used[x][y + 1] && lot.get(x).get(y + 1) == 1)
                bfs(x, y + 1, deep + 1, lot);
        }

    }

    private static class PP {

        int x;
        int y;

        public PP(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    boolean isInFlat(int x, int y) {
        return 0 <= x && x < numRows && 0 <= y && y < numColumns;
    }


    public int solution(int X, int[] A) {
        final int length = A.length;

        int[] prefGreen = proGreenPref(X, A);
        int[] suffRed = proRedSuff(X, A);

        if (suffRed[0] == 0) return 0;
        if (prefGreen[length - 1] == 0) return length;

        for (int i = 1; i < length; i++) {
            if (prefGreen[i - 1] == suffRed[i]) return i;
        }
        throw new IllegalStateException();
    }

    private int[] proRedSuff(int x, int[] a) {
        final int length = a.length;
        int[] ans = new int[length];
        ans[length - 1] = a[length - 1] == x ? 0 : 1;
        for (int i = length - 2; i >= 0; i--) {
            ans[i] = ans[i + 1];
            ans[i] += a[i] == x ? 0 : 1;
        }
        return ans;

    }

    private int[] proGreenPref(int x, int[] a) {
        int[] ans = new int[a.length];
        ans[0] = a[0] == x ? 1 : 0;
        for (int i = 1; i < a.length; i++) {
            ans[i] = ans[i - 1];
            ans[i] += a[i] == x ? 1 : 0;
        }
        return ans;
    }


    public int solution(int[] A) {
        boolean[] used = new boolean[(int) 1e6 + 10];
        for (int i = 0; i < A.length; i++) {
            if (A[i] > 0) {
                used[A[i]] = true;
            }
        }
        for (int i = 1; i <= 1e5; i++) {
            if (!used[i]) return i;
        }
        return (int) 1e5 + 1;
    }

    public static void main(String[] args) {
        new Main().run();
    }

    private BufferedReader reader;
    private StringTokenizer tokenizer;
    private PrintWriter writer;

    private void run() {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
             PrintWriter writer = new PrintWriter(new OutputStreamWriter(System.out))) {
            this.reader = reader;
            this.writer = writer;
            this.tokenizer = null;
            solve();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }


    private int nextInt(int radix) {
        return parseInt(nextToken(), radix);
    }

    private int nextInt() {
        return parseInt(nextToken());
    }

    private long nextLong(int radix) {
        return parseLong(nextToken(), radix);
    }

    private long nextLong() {
        return parseLong(nextToken());
    }

    private double nextDouble() {
        return parseDouble(nextToken());
    }

    private int[] nextArr(int size) {
        return stream(new int[size]).map(c -> nextInt()).toArray();
    }

    private long[] nextArrL(int size) {
        return stream(new long[size]).map(c -> nextLong()).toArray();
    }

    private double[] nextArrD(int size) {
        return stream(new double[size]).map(c -> nextDouble()).toArray();
    }

    private char[][] nextCharMatrix(int n) {
        return range(0, n).mapToObj(i -> nextToken().toCharArray()).toArray(char[][]::new);
    }

    private int[][] nextIntMatrix(final int n, final int m) {
        return range(0, n).mapToObj(i -> nextArr(m)).toArray(int[][]::new);
    }

    private double[][] nextDoubleMatrix(final int n, final int m) {
        return range(0, n).mapToObj(i -> nextArrD(m)).toArray(double[][]::new);
    }

    private String nextToken() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    private void souf(String format, Object... args) {
        writer.printf(format, args);
    }

    private void sout(Object o) {
        writer.print(o);
    }

    private void newLine() {
        writer.println();
    }

    private void soutnl(Object o) {
        sout(o);
        newLine();
    }

    private void flush() {
        writer.flush();
    }

}